from typing import *
from collections import defaultdict

v , e = list(map(int,input().split())) # v = number of nodes and e = number of edges
edges = []                             
for _ in range(e):
    temp = list(map(int,input().split()))
    edges.append(temp)
print(v)
print(e)
print(edges)
    
def prepare(adj,edges):
    for i in range(len(edges)):
        u = edges[i][0]
        v = edges[i][1]
        adj[u].append(v)
    print(adj)


def topo(n,edges):
    adj = defaultdict(list)
    prepare(adj,edges)
    print(adj)
    q = []
    indegree = [0]*(n)

    for node in range(n):
        for child in adj[node]:
            indegree[child] += 1

    for node in range(n):
        if indegree[node] == 0:
            q.append(node)

    topo = []

    while q:

        node = q.pop(0)
        topo.append(node)

        for child in adj[node]:
            indegree[child] -= 1
            if indegree[child] == 0:
                q.append(child)
    print(topo)
    
topo(v,edges)



INPUT : - 
6 6
5 2
5 0
4 0
4 1
3 1
2 3

OUTPUT:= 
[4, 5, 2, 0, 3, 1]


Time Complexity: O(N+E)

Space complexity: O(N)+O(N)
