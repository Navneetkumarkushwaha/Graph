from typing import *
from collections import defaultdict

v , e = list(map(int,input().split())) # v = number of nodes and e = number of edges
edges = []                             
for _ in range(e):
    temp = list(map(int,input().split()))
    edges.append(temp)
print(v)
print(e)
print(edges)
    
def prepare(adj,edges):
    for i in range(len(edges)):
        u = edges[i][0]
        v = edges[i][1]
        adj[u].append(v)  

def dfs(node,visited,ans,adj):
    ans.append(node)
    visited[node] = 1
    for child in adj[node]:
        if visited[child] == 0:
            dfs(child,visited,ans,adj)
        
def dfsOfGraph(v,e,edges):
    visited = [0]*(v+1)               # visited array for identify which node is visited.
    ans = []
    adj = defaultdict(list)
    prepare(adj,edges)
    print(adj)
    for node in range(v):
        temp = []
        if visited[node] == 0:
            dfs(node,visited,temp,adj)
            ans.append(temp)
    for grp in ans:
        print(grp)

dfsOfGraph(v, e, edges)
    
    
    
 Input: - 
 5 10
1 2
1 3
1 4
1 5
2 4
2 1
3 1
4 1
4 2
5 1
 
 
 Output: - 
 5
10
[[1, 2], [1, 3], [1, 4], [1, 5], [2, 4], [2, 1], [3, 1], [4, 1], [4, 2], [5, 1]]
defaultdict(<class 'list'>, {1: [2, 3, 4, 5], 2: [4, 1], 3: [1], 4: [1, 2], 5: [1]})
[0]
[1, 2, 4, 3, 5]



Time complexity: O(N+E), Where N is the time taken for visiting N nodes and E is for travelling through adjacent nodes.

Space Complexity:O(N+E)+O(N)+O(N) , Space for adjacency list, Array,Auxiliary space.
 
 
